---
import type { PostsCollection } from "@types";
import { getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import getPageNumbers from "@utils/getPageNumbers";
import getPostsWithRt from "@utils/getPostsWithRt";
import getSortedPosts from "@utils/getSortedPosts";
import { SITE } from "@config";
import { slugify } from "@utils/slugify";

export interface Props {
  post: PostsCollection;
}

export async function getStaticPaths() {
  const posts = await Promise.all(
    [
      await getCollection("blog", ({ data }) => import.meta.env.MODE === "development" || !data.draft),
      await getCollection("coding", ({ data }) => import.meta.env.MODE === "development" || !data.draft),
      await getCollection("comptia", ({ data }) => import.meta.env.MODE === "development" || !data.draft),
      await getCollection("cybersecurity", ({ data }) => import.meta.env.MODE === "development" || !data.draft),
      await getCollection("ethical-hacking", ({ data }) => import.meta.env.MODE === "development" || !data.draft)
    ].flat()
  );

  return [
    ...getPageNumbers(posts.length).map((pageNum) => ({
      params: { slug: String(pageNum) }
    }))
  ];
}
const { slug } = Astro.params;

const posts = await Promise.all(
  [
    await getCollection("blog"),
    await getCollection("coding"),
    await getCollection("comptia"),
    await getCollection("cybersecurity"),
    await getCollection("ethical-hacking")
  ].flat()
);
const sortedPosts = await getSortedPosts(posts);
const totalPages = getPageNumbers(sortedPosts.length);
const currentPage = slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug)) ? Number(slug) : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;
const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

<Posts posts={paginatedPosts} dir="posts" pageNum={currentPage} totalPages={totalPages.length} />
