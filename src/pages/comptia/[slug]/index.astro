---
import type { PostsCollection } from "@types";
import { getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getPageNumbers from "@utils/getPageNumbers";
import getPostsWithRt from "@utils/getPostsWithRt";
import getSortedPosts from "@utils/getSortedPosts";
import { slugify } from "@utils/slugify";
import { SITE } from "@config";

export interface Props {
  post: PostsCollection;
}

export async function getStaticPaths() {
  const posts = await getCollection("comptia", ({ data }) => import.meta.env.MODE === "development" || !data.draft);
  const postsWithRt = await getPostsWithRt(posts);

  const postResult = postsWithRt.map((post) => ({
    params: { slug: slugify(post.data) },
    props: { post }
  }));

  const pagePaths = getPageNumbers(posts.length).map((pageNum) => ({
    params: { slug: String(pageNum) }
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection("comptia");
const sortedPosts = await getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);
const currentPage = slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug)) ? Number(slug) : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Posts posts={paginatedPosts} dir="comptia" pageNum={currentPage} totalPages={totalPages.length} />
  )
}
